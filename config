/*
 *	aegis - project change supervisor
 *	This file is in the Public Domain, 1995, Peter Miller.
 *
 * MANIFEST: example use of fhist in the project config file
 *
 * The fhist program was written by David I. Bell and is admirably suited to
 * providing a history mechanism with out the "cruft" that SCCS and RCS impose.
 * The fhist program also comes with two other utilities, fcomp and fmerge,
 * which use the same minimal difference algorithm.
 */

/*
 * This command is used to create a new project history.  The command is always
 * executed as the project owner.  The following substitutions are available:
 *
 * ${Input}
 *	absolute path of the source file
 * ${History}
 *	absolute path of the history file
 */
history_create_command =
	"fhist ${b $i} -create -cu -i $i -p ${d $h} -r";

/*
 * This command is used to get a specific edit back from history.  The command
 * may be executed by developers.  The following substitutions are available:
 *
 * ${History}
 *	absolute path of the history file
 * ${Edit}
 *	edit number, as given by history_\%query_\%command
 * ${Output}
 *	absolute path of the destination file
 *
 * Note that the destination filename will never look anything like the history
 * source filename, so the -p is essential.
 */
history_get_command =
	"fhist ${b $h} -e '$e' -o $o -p ${d $h}";

/*
 * This command is used to add a new "top-most" entry to the history file.
 * This command is always executed as the project owner.  The following
 * substitutions are available:
 *
 * ${Input}
 *	absolute path of source file
 * ${History}
 *	absolute path of history file
 *
 * Note that the source file is left in the baseline.
 */
history_put_command =
	"fhist ${b $i} -cu -i $i -p ${d $h} -r";

/*
 * This command is used to query what the history mechanism calls the
 * "top-most" edit of a history file.  The result may be any arbitrary string,
 * it need not be anything like a number, just so long as it uniquely
 * identifies the edit for use by the history_get_command at a later date.  The
 * edit number is to be printed on the standard output.  This command may be
 * executed by developers.  The following substitutions are available:
 *
 * ${History}
 *	absolute path of the history file
 */
history_query_command =
	"fhist ${b $h} -l 0 -p ${d $h} -q";

/*
 * Compare two files using fcomp.  The -w option produces an output of the
 * entire file, with insertions an deletions marked by "change bars" in the
 * left margin.  This is superior to context difference, as it shows the entire
 * file as context.  The -s option could be added to compare runs of white
 * space as equal.
 *
 * This command is used by aed(1) to produce a difference listing when file in
 * the development directory was originally copied from the current version in
 * the baseline.
 *
 * All of the command substitutions described in aesub(5) are available.
 * In addition, the following substitutions are also available:
 *
 * ${ORiginal}
 *	The absolute path name of a file containing the version originally
 *	copied.  Usually in the baseline.
 * ${Input}
 *	The absolute path name of the edited version of the file.  Usually in
 *	the development directory.
 * ${Output}
 *	The absolute path name of the file in which to write the difference
 *	listing.  Usually in the development directory.
 *
 * An exit status of 0 means successful, even of the files differ (and they
 * usually do).  An exit status which is non-zero means something is wrong.
 *
 * The non-zero exit status may be used to overload this command with extra
 * tests, such as line length limits.  The difference files must be produced
 * in addition to these extra tests.
 */
diff_command =
	"fcomp -w $original $input -o $output";

/*
 * Compare three files using fmerge.
 * Conflicts are marked in the output.
 *
 * This command is used by aed(1) to produce a difference listing when a file
 * in the development directory is out of date compared to the current version
 * in the baseline.
 *
 * All of the command substitutions described in aesub(5) are available.
 * In addition, the following substitutions are also available:
 *
 * ${ORiginal}
 *	The absolute path name of a file containing the common ancestor
 *	version of ${MostRecent} and {$Input}.  Usually the version originally
 *	copied into the change.  Usually in a temporary file.
 * ${Most_Recent}
 *	The absolute path name of a file containing the most recent version.
 *	Usually in the baseline.
 * ${Input}
 *	The absolute path name of the edited version of the file.  Usually in
 *	the development directory.
 * ${Output}
 *	The absolute path name of the file in which to write the difference
 *	listing.  Usually in the development directory.
 *
 * An exit status of 0 means successful, even of the files differ (and they
 * usually do).  An exit status which is non-zero means something is wrong.
 */
diff3_command =
	"fmerge $original $MostRecent $input -o $output -c /dev/null";

/*
 *	aegis - project change supervisor
 *	This file is in the Public Domain, 1995, Peter Miller.
 *
 * MANIFEST: example use of cook in project config file
 *
 * The make(1) program exists in many forms, usually one is available with each
 * UNIX version.  The one used in the writing of this section is GNU Make 3.70,
 * avaiable by anonymous FTP from your nearest GNU archive site.  GNU Make was
 * chosen because it was the most powerful, it is widely avaiable (usually for
 * little or no cost) and discussion of the alternatives (SunOS make, BSD 4.3
 * make, etc), would not be universally applicable.  "Plain vanilla" make
 * (with no transitive closure, no pattern rules, no functions) is not
 * sufficiently capable to satisfy the demands placed on it by aegis.
 * 
 * As mentioned in the Dependency Maintenance Tool chapter of the User Guide,
 * make is not really sufficient, because it lacks dynamic include dependencies.
 * However, GNU Make has a form of dynamic include dependencies, and it has a
 * few quirks, but mostly works well.
 *
 * The other feature lacking in make is a search path.  While GNU Make has
 * functionality called VPATH, the implementation leaves something to be
 * desired, and can't be used for the search path functionality required by
 * aegis.  Because of this, the create_symlinks_before_build field of the
 * project config file is set to true so that aegis will arrange for the
 * development directory to be fiull of symbolic links, making it appear that
 * the entire project is in each change's development directory.
 */

/*
 * The build_command field of the project config file is used to invoke the
 * relevant build command.  This command tells make where to find the rules.
 * The ${s Makefile} expands to a path into the baseline during development
 * if the file is not in the change.  Look in aesub(5) for more information
 * about command substitutions.
 */
build_command =
	"make -f ${s Makefile} project=$p change=$c version=$v";

/*
 * The rules used in the User Guide all remove their targets before
 * constructing them, which qualifies them for the follwoing entry in the
 * config file.  The files must be removed first, otherwise the baseline would
 * cease to be self-consistent.
 */
link_integration_directory = true;

/*
 * Another field to be set in this file is one which tells aegis to maintain
 * symbolic links between the development directory and the basline.  This also
 * requires that rules remove their targets before constructing them, to ensure
 * that development builds do not attempt to write their results onto the
 * read-only versions in the baseline.
 */
create_symlinks_before_build = true;
